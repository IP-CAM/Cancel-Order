<?xml version="1.0" encoding="UTF-8"?>
<!--/*
 * @package     Opencart.extension
 * @copyright   Copyright (C) 2005 - 2016 Open Source Technologies, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @support
 * http://www.opensourcetechnologies.com/contactus.html
 * sales@opensourcetechnologies.com
 * */-->
<modification>
<id>Cancel Order</id>
<version>1.0</version>
<vqmver>2.X</vqmver>
<author>Mohit-OST</author>
<file name="catalog/view/theme/*/template/account/order_list.tpl">
<!-- Add new 'td' for cancel order -->
	<operation>
		<search position="after" offset="1"><![CDATA[<td class="text-right"><?php echo $column_total; ?></td>]]></search>
		<add><![CDATA[<?php if($cancelorder_status == 1) { //check module is enabled or disabled ?>
						<td></td>
					<?php } ?>]]></add>
	</operation>
<!-- Add cancel button -->	
	<operation>
		<search position="after"><![CDATA[<td class="text-right"><a href="<?php echo $order['href']; ?>" data-toggle="tooltip" title="<?php echo $button_view; ?>" class="btn btn-info"><i class="fa fa-eye"></i></a></td>]]></search>
		<add><![CDATA[<?php if($cancelorder_status == 1) { //check module is enabled or disabled ?>
		<td class="text-right">
		<?php if(!(($order['status'] == 'Canceled') || ($order['status'] == 'Complete'))) {?>
		<a href="<?php echo $order['cancelhref']; ?>" data-toggle="tooltip" title="<?php echo $button_cancel; ?>" class="btn btn-danger"><i class="fa fa-times"></i></a> <?php } ?>
		</td>
		<?php } ?>]]>
		</add>
	</operation>
</file>

<file name="catalog/controller/account/order.php">
<!-- Content for cancel button -->
	<operation>
		<search position="after"><![CDATA[$data['button_view'] = $this->language->get('button_view');]]></search>
		<add><![CDATA[$data['button_cancel'] = $this->language->get('button_cancel');
					$this->load->model('setting/setting');
					$data['cancelorder_status'] = $this->config->get('cancelorder_status');]]></add>
	</operation>	
<!-- Link for cancel order -->
	<operation>
		<search position="after"><![CDATA['href'       => $this->url->link('account/order/info', 'order_id=' . $result['order_id'], 'SSL'),]]></search>
		<add><![CDATA['cancelhref' 	 => $this->url->link('account/order/cancelorder', 'order_id=' . $result['order_id'], 'SSL'),]]></add>
	</operation>
<!-- Function for cancel order -->			
	<operation>
	<search position="before"><![CDATA[public function reorder() {]]></search>
	<add><![CDATA[
	public function cancelorder() {
//get order id
	if (isset($this->request->get['order_id'])) {
			$order_id = $this->request->get['order_id'];
		} else {
			$order_id = 0;
	}

	$this->load->language('account/order');	
		$this->load->model('account/order');
		$order_info = $this->model_account_order->getOrder($order_id);

	if($order_info['order_status_id'] != '7') {
//select order-id	
		$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");		
// Subtract quantity for each reverse product		
		foreach($product_query->rows as $product) {
			$this->db->query("UPDATE `" . DB_PREFIX . "product` SET quantity = (quantity + " . (int)$product['quantity'] . ") WHERE product_id = '" . (int)$product['product_id'] . "' AND subtract = '1'");
			
			$option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "'");

			foreach ($option_query->rows as $option) {
				$this->db->query("UPDATE " . DB_PREFIX . "product_option_value SET quantity = (quantity + " . (int)$product['quantity'] . ") WHERE product_option_value_id = '" . (int)$option['product_option_value_id'] . "' AND subtract = '1'");
			}				
		}
	}
//update status as cancel for cancel order	
	$this->db->query("UPDATE `" . DB_PREFIX . "order` SET order_status_id = '7' WHERE order_id = '" . (int)$order_id . "'");
	$this->db->query("UPDATE `" . DB_PREFIX . "order_history` SET order_status_id = '7' WHERE order_id = '" . (int)$order_id . "'");
	
// Send Email

/*		$subject = sprintf($this->language->get('text_subject'), html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8'));

		$message = sprintf($this->language->get('text_welcome'), html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8')) . "\n\n";

		$message .= $this->url->link('account/login', '', 'SSL') . "\n\n";
		$message .= $this->language->get('text_services') . "\n\n";
		$message .= $this->language->get('text_thanks') . "\n";
		$message .= html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8');

		$mail = new Mail();
		$mail->protocol = $this->config->get('config_mail_protocol');
		$mail->parameter = $this->config->get('config_mail_parameter');
		$mail->smtp_hostname = $this->config->get('config_mail_smtp_hostname');
		$mail->smtp_username = $this->config->get('config_mail_smtp_username');
		$mail->smtp_password = html_entity_decode($this->config->get('config_mail_smtp_password'), ENT_QUOTES, 'UTF-8');
		$mail->smtp_port = $this->config->get('config_mail_smtp_port');
		$mail->smtp_timeout = $this->config->get('config_mail_smtp_timeout');

		$mail->setTo($data['email']);
		$mail->setFrom($this->config->get('config_email'));
		$mail->setSender(html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8'));
		$mail->setSubject($subject);
		$mail->setText($message);
		$mail->send();
*/
// End Send Mail
//Redirect page to order		
	$this->response->redirect($this->url->link('account/order', '', 'SSL'));
}
	]]></add>
    </operation>
</file>
</modification>
